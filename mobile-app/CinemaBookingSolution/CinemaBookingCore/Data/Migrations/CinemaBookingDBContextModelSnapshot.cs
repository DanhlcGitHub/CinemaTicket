// <auto-generated />
using CinemaBookingCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CinemaBookingCore.Migrations
{
    [DbContext(typeof(CinemaBookingDBContext))]
    partial class CinemaBookingDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.AdminAccount", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnName("adminId")
                        .HasMaxLength(255);

                    b.Property<string>("AdminPassword")
                        .HasColumnName("adminPassword")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(255);

                    b.HasKey("AdminId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BankAccount", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasColumnName("cardNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("BankId");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnName("expDate")
                        .HasColumnType("date");

                    b.Property<string>("OwnerName")
                        .HasColumnName("ownerName")
                        .HasMaxLength(255);

                    b.HasKey("CardNumber");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BankList", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bankId");

                    b.Property<string>("BankName")
                        .HasColumnName("bankName")
                        .HasMaxLength(255);

                    b.Property<string>("ImgLogo")
                        .HasColumnName("imgLogo")
                        .HasMaxLength(255);

                    b.HasKey("BankId");

                    b.ToTable("BankList");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BookingDetail", b =>
                {
                    b.Property<int>("BookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bookingDetailId");

                    b.Property<int?>("BookingId")
                        .HasColumnName("bookingId");

                    b.Property<int?>("TicketId")
                        .HasColumnName("ticketId");

                    b.HasKey("BookingDetailId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TicketId");

                    b.ToTable("BookingDetail");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BookingTicket", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bookingId");

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnName("bookingDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customerId");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnName("paymentMethodId");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookingTicket");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Cinema", b =>
                {
                    b.Property<int>("CinemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cinemaId");

                    b.Property<string>("CinemaAddress")
                        .HasColumnName("cinemaAddress")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(200);

                    b.Property<int?>("GroupId")
                        .HasColumnName("groupId");

                    b.Property<string>("Introduction")
                        .HasColumnName("introduction")
                        .HasMaxLength(1000);

                    b.Property<string>("OpenTime")
                        .HasColumnName("openTime")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(200);

                    b.Property<string>("ProfilePicture")
                        .HasColumnName("profilePicture")
                        .HasMaxLength(255);

                    b.HasKey("CinemaId");

                    b.HasIndex("GroupId");

                    b.ToTable("Cinema");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.CinemaManager", b =>
                {
                    b.Property<string>("ManagerId")
                        .HasColumnName("managerId")
                        .HasMaxLength(255);

                    b.Property<int?>("CinemaId")
                        .HasColumnName("cinemaId");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("ManagerPassword")
                        .HasColumnName("managerPassword")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(255);

                    b.HasKey("ManagerId");

                    b.HasIndex("CinemaId");

                    b.ToTable("CinemaManager");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customerId");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(255);

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.DigitalType", b =>
                {
                    b.Property<int>("DigTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("digTypeId");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.HasKey("DigTypeId");

                    b.ToTable("DigitalType");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filmId");

                    b.Property<string>("ActorList")
                        .HasColumnName("actorList")
                        .HasMaxLength(255);

                    b.Property<string>("AdditionPicture")
                        .HasColumnName("additionPicture")
                        .HasMaxLength(1000);

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasMaxLength(255);

                    b.Property<string>("Countries")
                        .HasColumnName("countries")
                        .HasMaxLength(255);

                    b.Property<DateTime>("DateRelease")
                        .HasColumnName("dateRelease")
                        .HasColumnType("datetime");

                    b.Property<string>("DigTypeId")
                        .HasColumnName("digTypeId")
                        .HasMaxLength(50);

                    b.Property<string>("FilmContent")
                        .HasColumnName("filmContent")
                        .HasMaxLength(1000);

                    b.Property<int?>("FilmLength")
                        .HasColumnName("filmLength");

                    b.Property<int?>("FilmStatus")
                        .HasColumnName("filmStatus");

                    b.Property<double?>("Imdb")
                        .HasColumnName("imdb");

                    b.Property<string>("MovieGenre")
                        .HasColumnName("movieGenre")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.Property<string>("PosterPicture")
                        .HasColumnName("posterPicture")
                        .HasMaxLength(255);

                    b.Property<int?>("Restricted")
                        .HasColumnName("restricted");

                    b.Property<string>("TrailerLink")
                        .HasColumnName("trailerLink")
                        .HasMaxLength(500);

                    b.HasKey("FilmId");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.GroupCinema", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoImg")
                        .HasColumnName("logoImg")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(255);

                    b.HasKey("GroupId");

                    b.ToTable("GroupCinema");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.MovieSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("scheduleId");

                    b.Property<int?>("FilmId")
                        .HasColumnName("filmId");

                    b.Property<int?>("RoomId")
                        .HasColumnName("roomId");

                    b.Property<int?>("TimeId")
                        .HasColumnName("timeId");

                    b.HasKey("ScheduleId");

                    b.HasIndex("FilmId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TimeId");

                    b.ToTable("MovieSchedule");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("newsId");

                    b.Property<int?>("FilmId")
                        .HasColumnName("filmId");

                    b.Property<string>("UrlDocument")
                        .HasColumnName("urlDocument")
                        .HasMaxLength(255);

                    b.HasKey("NewsId");

                    b.HasIndex("FilmId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.PartnerAccount", b =>
                {
                    b.Property<string>("PartnerId")
                        .HasColumnName("partnerId")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<int?>("GroupOfCinemaId")
                        .HasColumnName("groupOfCinemaId");

                    b.Property<string>("PartnerPassword")
                        .HasColumnName("partnerPassword")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(255);

                    b.HasKey("PartnerId");

                    b.HasIndex("GroupOfCinemaId");

                    b.ToTable("PartnerAccount");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("promotionId");

                    b.Property<int?>("CinemaId")
                        .HasColumnName("cinemaId");

                    b.Property<string>("UrlDocument")
                        .HasColumnName("urlDocument")
                        .HasMaxLength(255);

                    b.HasKey("PromotionId");

                    b.HasIndex("CinemaId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("roomId");

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity");

                    b.Property<int?>("CinemaId")
                        .HasColumnName("cinemaId");

                    b.Property<int?>("DigTypeId")
                        .HasColumnName("digTypeId");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.HasKey("RoomId");

                    b.HasIndex("CinemaId");

                    b.HasIndex("DigTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("seatId");

                    b.Property<int?>("Px")
                        .HasColumnName("px");

                    b.Property<int?>("Py")
                        .HasColumnName("py");

                    b.Property<int?>("RoomId")
                        .HasColumnName("roomId");

                    b.Property<int?>("TypeSeatId")
                        .HasColumnName("typeSeatId");

                    b.HasKey("SeatId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TypeSeatId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.ShowTime", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timeId");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("endTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("startTime")
                        .HasColumnType("datetime");

                    b.HasKey("TimeId");

                    b.ToTable("ShowTime");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ticketId");

                    b.Property<string>("PaymentCode")
                        .HasColumnName("paymentCode")
                        .HasMaxLength(50);

                    b.Property<double?>("Price")
                        .HasColumnName("price");

                    b.Property<int?>("QrCode")
                        .HasColumnName("qrCode");

                    b.Property<int?>("ScheduleId")
                        .HasColumnName("scheduleId");

                    b.Property<int?>("SeatId")
                        .HasColumnName("seatId");

                    b.Property<string>("TicketStatus")
                        .HasColumnName("ticketStatus")
                        .HasMaxLength(20);

                    b.HasKey("TicketId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SeatId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.TypeOfSeat", b =>
                {
                    b.Property<int>("TypeSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("typeSeatId");

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity");

                    b.Property<int?>("GroupId")
                        .HasColumnName("groupId");

                    b.Property<double?>("Price")
                        .HasColumnName("price");

                    b.Property<int?>("TypeName")
                        .HasColumnName("typeName");

                    b.HasKey("TypeSeatId");

                    b.HasIndex("GroupId");

                    b.ToTable("TypeOfSeat");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.UserAccount", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(255);

                    b.Property<string>("UserPassword")
                        .HasColumnName("userPassword")
                        .HasMaxLength(255);

                    b.HasKey("UserId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BookingDetail", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.BookingTicket", "Booking")
                        .WithMany("BookingDetail")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FKBookingDetailBookingTicket001");

                    b.HasOne("CinemaBookingCore.Data.Entities.Ticket", "Ticket")
                        .WithMany("BookingDetail")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FKBookingDetailTicket001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.BookingTicket", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Customer", "Customer")
                        .WithMany("BookingTicket")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FKBookingTicketCustomer001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Cinema", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.GroupCinema", "Group")
                        .WithMany("Cinema")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FKCinemaGroupCinema001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.CinemaManager", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Cinema", "Cinema")
                        .WithMany("CinemaManager")
                        .HasForeignKey("CinemaId")
                        .HasConstraintName("FKCinemaManagerCinema001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.MovieSchedule", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Film", "Film")
                        .WithMany("MovieSchedule")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FKMovieScheduleFilm001");

                    b.HasOne("CinemaBookingCore.Data.Entities.Room", "Room")
                        .WithMany("MovieSchedule")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FKMovieScheduleRoom001");

                    b.HasOne("CinemaBookingCore.Data.Entities.ShowTime", "Time")
                        .WithMany("MovieSchedule")
                        .HasForeignKey("TimeId")
                        .HasConstraintName("FKMovieScheduleShowTime001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.News", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Film", "Film")
                        .WithMany("News")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FKNewsFilm001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.PartnerAccount", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.GroupCinema", "GroupOfCinema")
                        .WithMany("PartnerAccount")
                        .HasForeignKey("GroupOfCinemaId")
                        .HasConstraintName("FKPartnerAccountGroupCinema001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Promotion", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Cinema", "Cinema")
                        .WithMany("Promotion")
                        .HasForeignKey("CinemaId")
                        .HasConstraintName("FKPromotionCinema001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Room", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Cinema", "Cinema")
                        .WithMany("Room")
                        .HasForeignKey("CinemaId")
                        .HasConstraintName("FKRoomCinema001");

                    b.HasOne("CinemaBookingCore.Data.Entities.DigitalType", "DigType")
                        .WithMany("Room")
                        .HasForeignKey("DigTypeId")
                        .HasConstraintName("FKRoomDigitalType001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Seat", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.Room", "Room")
                        .WithMany("Seat")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FKSeatRoom001");

                    b.HasOne("CinemaBookingCore.Data.Entities.TypeOfSeat", "TypeSeat")
                        .WithMany("Seat")
                        .HasForeignKey("TypeSeatId")
                        .HasConstraintName("FKSeatTypeOfSeat001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.Ticket", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.MovieSchedule", "Schedule")
                        .WithMany("Ticket")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FKTicketMovieSchedule001");

                    b.HasOne("CinemaBookingCore.Data.Entities.Seat", "Seat")
                        .WithMany("Ticket")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FKTicketSeat001");
                });

            modelBuilder.Entity("CinemaBookingCore.Data.Entities.TypeOfSeat", b =>
                {
                    b.HasOne("CinemaBookingCore.Data.Entities.GroupCinema", "Group")
                        .WithMany("TypeOfSeat")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FKTypeOfSeatGroupCinema001");
                });
#pragma warning restore 612, 618
        }
    }
}
